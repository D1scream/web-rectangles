package com.example.game.model;

import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

// tests generated by ‚Ñçùïíùï•ùï§ùï¶ùïüùïñ ùïÑùïöùïúùï¶ then manually modified
public class GameSquareDetectionTest {

    private Game game;

    @BeforeEach
    void setUp() {
        game = new Game(5, "user", 'w', "comp", 'b');
    }
    
    // ========== –¢–ï–°–¢–´ –ù–ê –û–¢–°–£–¢–°–¢–í–ò–ï –ö–í–ê–î–†–ê–¢–û–í ==========
    
    @Test
    void testNoSquare_EmptyBoard() {
        // –ü—É—Å—Ç–∞—è –¥–æ—Å–∫–∞ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        char[][] emptyBoard = {
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(emptyBoard);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    @Test
    void testNoSquare_SinglePiece() {
        // –û–¥–Ω–∞ —Ñ–∏—à–∫–∞ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        char[][] singlePiece = {
            {'w', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(singlePiece);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    @Test
    void testNoSquare_TwoPieces() {
        // –î–≤–µ —Ñ–∏—à–∫–∏ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        char[][] twoPieces = {
            {'w', 'w', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(twoPieces);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    @Test
    void testNoSquare_ThreePieces() {
        // –¢—Ä–∏ —Ñ–∏—à–∫–∏ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        char[][] threePieces = {
            {'w', 'w', '.', '.', '.'},
            {'w', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(threePieces);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    @Test
    void testNoSquare_MixedColors() {
        // –§–∏—à–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        char[][] mixedColors = {
            {'w', 'b', '.', '.', '.'},
            {'w', 'b', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(mixedColors);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    @Test
    void testNoSquare_IncompleteSquare() {
        // –ù–µ–ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        char[][] incompleteSquare = {
            {'w', 'w', 'b', '.', '.'},
            {'w', '.', 'b', '.', '.'},
            {'.', '.', 'b', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(incompleteSquare);
        assertTrue(game.getBoard().checkWin() == null);
    }

    @Test
    void testNoSquare_DiagonalPieces() {
        // –¢—Ä–∏ —Ñ–∏—à–∫–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ ‚Äî –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        char[][] diagonalPieces = {
            {'w', '.', '.', '.', '.'},
            {'.', 'b', '.', '.', '.'},
            {'.', '.', 'w', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(diagonalPieces);
        assertTrue(game.getBoard().checkWin() == null);
    }
    
    // ========== –¢–ï–°–¢–´ –ù–ê –ù–ê–õ–ò–ß–ò–ï –ö–í–ê–î–†–ê–¢–û–í ==========

    @Test
    void testSquare_Rotated45Degrees() {
        // –ö–≤–∞–¥—Ä–∞—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç –Ω–∞ 45¬∞ (—Ä–æ–º–±)
        // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω: (1,0),(2,1),(1,2),(0,1)
        char[][] rotatedSquare = {
            {'.', 'w', '.', 'b', '.'},
            {'w', '.', 'w', 'b', '.'},
            {'.', 'w', '.', 'b', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(rotatedSquare);
        assertTrue(game.getBoard().checkWin() == 'w');
    }
    
    @Test
    void testSquare_justSquare() {
        // –ö–≤–∞–¥—Ä–∞—Ç
        // w w
        // w w
        char[][] square = {
            {'w', 'w', 'b', 'b', '.'},
            {'w', 'w', 'b', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(square);
        assertTrue(game.getBoard().checkWin() == 'w');
    }
    
    @Test
    void testSquare_AtBoardEdge() {
        // –ö–≤–∞–¥—Ä–∞—Ç —É –∫—Ä–∞—è –¥–æ—Å–∫–∏
        char[][] edgeSquare = {
            {'w', 'w', 'b', '.', '.'},
            {'w', 'w', 'b', '.', '.'},
            {'.', '.', 'b', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(edgeSquare);
        assertTrue(game.getBoard().checkWin() == 'w');
    }
    
    @Test
    void testSquare_CenterOfBoard() {
        // –ö–≤–∞–¥—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–æ—Å–∫–∏
        char[][] centerSquare = {
            {'.', '.', '.', '.', '.'},
            {'.', 'w', 'w', 'b', '.'},
            {'.', 'w', 'w', 'b', '.'},
            {'.', '.', '.', 'b', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(centerSquare);
        assertTrue(game.getBoard().checkWin() == 'w');
    }
    
    @Test
    void testSquare_BlackPieces() {
        // –ö–≤–∞–¥—Ä–∞—Ç –∏–∑ —á–µ—Ä–Ω—ã—Ö —Ñ–∏—à–µ–∫
        char[][] blackSquare = {
            {'b', 'b', 'w', 'w', '.'},
            {'b', 'b', 'w', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'},
            {'.', '.', '.', '.', '.'}
        };
        game.getBoard().setGrid(blackSquare);
        assertTrue(game.getBoard().checkWin() == 'b');
    }
}