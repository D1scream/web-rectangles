package com.example.game.model;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

// tests generated by ‚Ñçùïíùï•ùï§ùï¶ùïüùïñ ùïÑùïöùïúùï¶ then manually modified
public class GameSquareDetectionTest {

    private Game game;

    @BeforeEach
    void setUp() {
        game = new Game(5, "user", 'w', "comp", 'b');
    }
    
    // ========== –¢–ï–°–¢–´ –ù–ê –û–¢–°–£–¢–°–¢–í–ò–ï –ö–í–ê–î–†–ê–¢–û–í ==========
    
    @Test
    void testNoSquare_EmptyBoard() {
        // –ü—É—Å—Ç–∞—è –¥–æ—Å–∫–∞ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        assertFalse(game.checkWin(0, 0, 'w'));
    }
    
    @Test
    void testNoSquare_SinglePiece() {
        // –û–¥–Ω–∞ —Ñ–∏—à–∫–∞ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        game.makeMove(0, 0);
        assertFalse(game.checkWin(0, 0, 'w'));
    }
    
    @Test
    void testNoSquare_TwoPieces() {
        // –î–≤–µ —Ñ–∏—à–∫–∏ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        game.makeMove(0, 0);
        game.makeMove(1, 0);
        assertFalse(game.checkWin(1, 0, 'w'));
    }
    
    @Test
    void testNoSquare_ThreePieces() {
        // –¢—Ä–∏ —Ñ–∏—à–∫–∏ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
        game.makeMove(0, 0);
        game.makeMove(1, 0);
        game.makeMove(0, 1);
        assertFalse(game.checkWin(0, 1, 'w'));
    }
    
    @Test
    void testNoSquare_MixedColors() {
        // –§–∏—à–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        game.makeMove(0, 0); // w
        game.makeMove(1, 0); // b
        game.makeMove(0, 1); // w
        game.makeMove(1, 1); // b
        assertFalse(game.checkWin(1, 1, 'w'));
    }
    
    @Test
    void testNoSquare_IncompleteSquare() {
        // –ù–µ–ø–æ–ª–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç - –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        game.makeMove(0, 0); // w
        game.makeMove(2, 0); // b
        game.makeMove(1, 0); // w
        game.makeMove(2, 1); // b
        game.makeMove(0, 1); // w
        game.makeMove(2, 2); // b
        // –ù–µ—Ç —á–µ—Ç–≤–µ—Ä—Ç–æ–π —Ñ–∏—à–∫–∏ –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
        assertFalse(game.checkWin(0, 1, 'w'));
    }

    @Test
    void testNoSquare_DiagonalPieces() {
        // –¢—Ä–∏ —Ñ–∏—à–∫–∏ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ ‚Äî –Ω–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∞
        game.makeMove(0,0); // w
        game.makeMove(1,1); // b
        game.makeMove(2,2); // w
        assertFalse(game.checkWin(2,2,'w'));
    }
    
    // ========== –¢–ï–°–¢–´ –ù–ê –ù–ê–õ–ò–ß–ò–ï –ö–í–ê–î–†–ê–¢–û–í ==========

    @Test
    void testSquare_Rotated45Degrees() {
        // –ö–≤–∞–¥—Ä–∞—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç –Ω–∞ 45¬∞ (—Ä–æ–º–±)
        // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω: (1,0),(2,1),(1,2),(0,1)
        game.makeMove(1,0); // w
        game.makeMove(3,0); // b
        game.makeMove(2,1); // w
        game.makeMove(3,1); // b
        game.makeMove(1,2); // w
        game.makeMove(3,2); // b
        game.makeMove(0,1); // w
        assertTrue(game.checkWin(0,1,'w'));
    }
    
    @Test
    void testSquare_justSquare() {
        // –ö–≤–∞–¥—Ä–∞—Ç
        // w w
        // w w
        game.makeMove(0, 0); // w
        game.makeMove(2, 0); // b
        game.makeMove(0, 1); // w
        game.makeMove(2, 1); // b
        game.makeMove(1, 0); // w
        game.makeMove(3, 0); // b
        game.makeMove(1, 1); // w
        
        assertTrue(game.checkWin(1, 1, 'w'));
    }
    
    @Test
    void testSquare_AtBoardEdge() {
        // –ö–≤–∞–¥—Ä–∞—Ç —É –∫—Ä–∞—è –¥–æ—Å–∫–∏
        game.makeMove(0, 0); // w
        game.makeMove(2, 0); // b
        game.makeMove(1, 0); // w
        game.makeMove(2, 1); // b
        game.makeMove(0, 1); // w
        game.makeMove(2, 2); // b
        game.makeMove(1, 1); // w
        
        assertTrue(game.checkWin(1, 1, 'w'));
    }
    
    @Test
    void testSquare_CenterOfBoard() {
        // –ö–≤–∞–¥—Ä–∞—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–æ—Å–∫–∏
        game.makeMove(1, 1); // w
        game.makeMove(3, 1); // b
        game.makeMove(2, 1); // w
        game.makeMove(3, 2); // b
        game.makeMove(1, 2); // w
        game.makeMove(3, 3); // b
        game.makeMove(2, 2); // w
        
        assertTrue(game.checkWin(2, 2, 'w'));
    }
    
    @Test
    void testSquare_BlackPieces() {
        // –ö–≤–∞–¥—Ä–∞—Ç –∏–∑ —á–µ—Ä–Ω—ã—Ö —Ñ–∏—à–µ–∫
        Game blackGame = new Game(5, "user", 'b', "comp", 'w');
        blackGame.makeMove(0, 0); // b
        blackGame.makeMove(2, 0); // w
        blackGame.makeMove(0, 1); // b
        blackGame.makeMove(2, 1); // w
        blackGame.makeMove(1, 0); // b
        blackGame.makeMove(3, 0); // w
        blackGame.makeMove(1, 1); // b
        
        assertTrue(blackGame.checkWin(1, 1, 'b'));
    }
}